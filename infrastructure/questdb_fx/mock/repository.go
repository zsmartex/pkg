// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=mock/repository.go -package=mock_questdb
//
// Package mock_questdb is a generated GoMock package.
package mock_questdb

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	schema "gorm.io/gorm/schema"
)

// MockRepository is a mock of Repository interface.
type MockRepository[T schema.Tabler] struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder[T]
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder[T schema.Tabler] struct {
	mock *MockRepository[T]
}

// NewMockRepository creates a new mock instance.
func NewMockRepository[T schema.Tabler](ctrl *gomock.Controller) *MockRepository[T] {
	mock := &MockRepository[T]{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository[T]) EXPECT() *MockRepositoryMockRecorder[T] {
	return m.recorder
}

// Exec mocks base method.
func (m *MockRepository[T]) Exec(ctx context.Context, sql string, attrs ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockRepositoryMockRecorder[T]) Exec(ctx, sql any, attrs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, attrs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockRepository[T])(nil).Exec), varargs...)
}

// Query mocks base method.
func (m *MockRepository[T]) Query(ctx context.Context, dst any, sql string, attrs ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, dst, sql}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockRepositoryMockRecorder[T]) Query(ctx, dst, sql any, attrs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, dst, sql}, attrs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockRepository[T])(nil).Query), varargs...)
}

// QueryRow mocks base method.
func (m *MockRepository[T]) QueryRow(ctx context.Context, dst any, sql string, attrs ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, dst, sql}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockRepositoryMockRecorder[T]) QueryRow(ctx, dst, sql any, attrs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, dst, sql}, attrs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockRepository[T])(nil).QueryRow), varargs...)
}
