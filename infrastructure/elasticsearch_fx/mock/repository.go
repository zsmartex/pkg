// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=mock/repository.go -package=mock_elasticsearch
//
// Package mock_elasticsearch is a generated GoMock package.
package mock_elasticsearch

import (
	context "context"
	reflect "reflect"

	epa "github.com/zsmartex/pkg/v2/epa"
	elasticsearch_fx "github.com/zsmartex/pkg/v2/infrastructure/elasticsearch_fx"
	gomock "go.uber.org/mock/gomock"
)

// MockSchema is a mock of Schema interface.
type MockSchema struct {
	ctrl     *gomock.Controller
	recorder *MockSchemaMockRecorder
}

// MockSchemaMockRecorder is the mock recorder for MockSchema.
type MockSchemaMockRecorder struct {
	mock *MockSchema
}

// NewMockSchema creates a new mock instance.
func NewMockSchema(ctrl *gomock.Controller) *MockSchema {
	mock := &MockSchema{ctrl: ctrl}
	mock.recorder = &MockSchemaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchema) EXPECT() *MockSchemaMockRecorder {
	return m.recorder
}

// IndexName mocks base method.
func (m *MockSchema) IndexName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexName")
	ret0, _ := ret[0].(string)
	return ret0
}

// IndexName indicates an expected call of IndexName.
func (mr *MockSchemaMockRecorder) IndexName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexName", reflect.TypeOf((*MockSchema)(nil).IndexName))
}

// MockRepository is a mock of Repository interface.
type MockRepository[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder[T]
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder[T any] struct {
	mock *MockRepository[T]
}

// NewMockRepository creates a new mock instance.
func NewMockRepository[T any](ctrl *gomock.Controller) *MockRepository[T] {
	mock := &MockRepository[T]{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository[T]) EXPECT() *MockRepositoryMockRecorder[T] {
	return m.recorder
}

// CheckHealth mocks base method.
func (m *MockRepository[T]) CheckHealth(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHealth", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckHealth indicates an expected call of CheckHealth.
func (mr *MockRepositoryMockRecorder[T]) CheckHealth(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHealth", reflect.TypeOf((*MockRepository[T])(nil).CheckHealth), ctx)
}

// Find mocks base method.
func (m *MockRepository[T]) Find(ctx context.Context, q epa.Query) (*elasticsearch_fx.Result[T], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, q)
	ret0, _ := ret[0].(*elasticsearch_fx.Result[T])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockRepositoryMockRecorder[T]) Find(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRepository[T])(nil).Find), ctx, q)
}
